{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","chooseTodo","currentTodo","className","map","todo","id","title","completed","classNames","type","onClick","TodoFilter","memo","changeQuery","changeOption","selectedOption","query","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","clearTodo","useState","currentUser","setCurrenUser","loadUserFromServer","useCallback","idOfUser","a","user","useEffect","href","email","name","App","visibleTodos","setVisibleTodos","setSelectedOption","setCurrentTodo","setQuery","loadTodosFromApi","str","option","filteredTodos","filter","toLowerCase","includes","filterTodosByRequirments","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8762b782.chunk.js","sourcesContent":["import { FC } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface TodoListProps {\n  todos: Todo[];\n  chooseTodo: (todo: Todo) => void;\n  currentTodo: Todo | null;\n}\n\nexport const TodoList: FC<TodoListProps> = (\n  { todos, chooseTodo, currentTodo },\n) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map((todo) => {\n        const {\n          id,\n          title,\n          completed,\n        } = todo;\n\n        return (\n          (\n            <tr data-cy=\"todo\" className=\"\" key={id}>\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered \">\n                {completed\n                  && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => chooseTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('far', {\n                      'fa-eye-slash': id === currentTodo?.id,\n                      'fa-eye': id !== currentTodo?.id,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          )\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import {\n  ChangeEvent,\n  FC,\n  memo,\n} from 'react';\n\ninterface TodoFilterProps {\n  changeQuery: (query: string) => void;\n  changeOption: (option: string) => void;\n  selectedOption: string,\n  query: string,\n}\n\nexport const TodoFilter: FC<TodoFilterProps> = memo(({\n  changeQuery, changeOption, selectedOption, query,\n}) => {\n  const handleChangeSearchInput = (event: ChangeEvent<HTMLInputElement>) => {\n    changeQuery(event.target.value);\n  };\n\n  const handleChangeStatus = ((event: ChangeEvent<HTMLSelectElement>) => {\n    changeOption(event.target.value);\n  });\n\n  const handleChangeClearButton = () => {\n    changeQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedOption}\n            onChange={handleChangeStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChangeSearchInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          { query !== ''\n            && (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={handleChangeClearButton}\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface TodoModalProps {\n  todo: Todo;\n  clearTodo: () => void;\n}\n\nexport const TodoModal: FC<TodoModalProps> = ({ todo, clearTodo }) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n  const [currentUser, setCurrenUser] = useState<User | null>(null);\n\n  const loadUserFromServer = useCallback(async (idOfUser) => {\n    const user = await getUser(idOfUser);\n\n    setCurrenUser(user);\n  }, []);\n\n  useEffect(() => {\n    loadUserFromServer(userId);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!currentUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => clearTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={classNames({\n                'has-text-danger': !completed,\n                'has-text-success': completed,\n              })}\n              >\n                {completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${currentUser?.email}`}>\n                {currentUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: FC = () => {\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [selectedOption, setSelectedOption] = useState('All');\n  const [currentTodo, setCurrentTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n\n  const loadTodosFromApi = useCallback(async () => {\n    const todos = await getTodos();\n\n    setVisibleTodos(todos);\n  }, []);\n\n  const changeQuery = useCallback((str: string) => {\n    setQuery(str);\n  }, []);\n\n  const changeOption = useCallback((option: string) => {\n    setSelectedOption(option);\n  }, []);\n\n  const filterTodosByRequirments = (str: string, option: string) => {\n    let todos = visibleTodos;\n\n    // eslint-disable-next-line default-case\n    switch (option) {\n      case 'completed':\n        todos = visibleTodos.filter(({ completed }) => completed);\n        break;\n      case 'active':\n        todos = visibleTodos.filter(({ completed }) => !completed);\n        break;\n    }\n\n    return todos.filter(({ title }) => title.toLowerCase().includes(str.toLowerCase()));\n  };\n\n  const chooseTodo = (todo: Todo) => {\n    setCurrentTodo(todo);\n  };\n\n  const clearTodo = () => {\n    setCurrentTodo(null);\n  };\n\n  const filteredTodos = filterTodosByRequirments(query, selectedOption);\n\n  useEffect(() => {\n    loadTodosFromApi();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                changeQuery={changeQuery}\n                changeOption={changeOption}\n                selectedOption={selectedOption}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {/* <Loader /> */}\n              {(filteredTodos.length === 0 && query === '')\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={filteredTodos}\n                    chooseTodo={chooseTodo}\n                    currentTodo={currentTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {\n        currentTodo && <TodoModal todo={currentTodo} clearTodo={clearTodo} />\n      }\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}